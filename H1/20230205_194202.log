2023-02-05 19:42:02,836 - mmcls - INFO - Environment info:
------------------------------------------------------------
sys.platform: linux
Python: 3.8.16 (default, Jan 17 2023, 23:13:24) [GCC 11.2.0]
CUDA available: True
GPU 0,1: NVIDIA GeForce RTX 3090
CUDA_HOME: /data/apps/cuda/11.1
NVCC: Cuda compilation tools, release 11.1, V11.1.74
GCC: gcc (GCC) 7.3.0
PyTorch: 1.10.0+cu111
PyTorch compiling details: PyTorch built with:
  - GCC 7.3
  - C++ Version: 201402
  - Intel(R) Math Kernel Library Version 2020.0.0 Product Build 20191122 for Intel(R) 64 architecture applications
  - Intel(R) MKL-DNN v2.2.3 (Git Hash 7336ca9f055cf1bfa13efb658fe15dc9b41f0740)
  - OpenMP 201511 (a.k.a. OpenMP 4.5)
  - LAPACK is enabled (usually provided by MKL)
  - NNPACK is enabled
  - CPU capability usage: AVX2
  - CUDA Runtime 11.1
  - NVCC architecture flags: -gencode;arch=compute_37,code=sm_37;-gencode;arch=compute_50,code=sm_50;-gencode;arch=compute_60,code=sm_60;-gencode;arch=compute_70,code=sm_70;-gencode;arch=compute_75,code=sm_75;-gencode;arch=compute_80,code=sm_80;-gencode;arch=compute_86,code=sm_86
  - CuDNN 8.0.5
  - Magma 2.5.2
  - Build settings: BLAS_INFO=mkl, BUILD_TYPE=Release, CUDA_VERSION=11.1, CUDNN_VERSION=8.0.5, CXX_COMPILER=/opt/rh/devtoolset-7/root/usr/bin/c++, CXX_FLAGS= -Wno-deprecated -fvisibility-inlines-hidden -DUSE_PTHREADPOOL -fopenmp -DNDEBUG -DUSE_KINETO -DUSE_FBGEMM -DUSE_QNNPACK -DUSE_PYTORCH_QNNPACK -DUSE_XNNPACK -DSYMBOLICATE_MOBILE_DEBUG_HANDLE -DEDGE_PROFILER_USE_KINETO -O2 -fPIC -Wno-narrowing -Wall -Wextra -Werror=return-type -Wno-missing-field-initializers -Wno-type-limits -Wno-array-bounds -Wno-unknown-pragmas -Wno-sign-compare -Wno-unused-parameter -Wno-unused-variable -Wno-unused-function -Wno-unused-result -Wno-unused-local-typedefs -Wno-strict-overflow -Wno-strict-aliasing -Wno-error=deprecated-declarations -Wno-stringop-overflow -Wno-psabi -Wno-error=pedantic -Wno-error=redundant-decls -Wno-error=old-style-cast -fdiagnostics-color=always -faligned-new -Wno-unused-but-set-variable -Wno-maybe-uninitialized -fno-math-errno -fno-trapping-math -Werror=format -Wno-stringop-overflow, LAPACK_INFO=mkl, PERF_WITH_AVX=1, PERF_WITH_AVX2=1, PERF_WITH_AVX512=1, TORCH_VERSION=1.10.0, USE_CUDA=ON, USE_CUDNN=ON, USE_EXCEPTION_PTR=1, USE_GFLAGS=OFF, USE_GLOG=OFF, USE_MKL=ON, USE_MKLDNN=ON, USE_MPI=OFF, USE_NCCL=ON, USE_NNPACK=ON, USE_OPENMP=ON, 

TorchVision: 0.11.0+cu111
OpenCV: 4.7.0
MMCV: 1.7.0
MMCV Compiler: GCC 7.3
MMCV CUDA Compiler: 11.1
MMClassification: 0.25.0+
------------------------------------------------------------

2023-02-05 19:42:02,837 - mmcls - INFO - Distributed training: True
2023-02-05 19:42:02,935 - mmcls - INFO - Config:
model = dict(
    type='ImageClassifier',
    backbone=dict(
        type='ResNet',
        depth=18,
        num_stages=4,
        out_indices=(3, ),
        style='pytorch'),
    neck=dict(type='GlobalAveragePooling'),
    head=dict(
        type='LinearClsHead',
        num_classes=5,
        in_channels=512,
        loss=dict(type='CrossEntropyLoss', loss_weight=1.0),
        topk=(1, )))
dataset_type = 'ImageNet'
img_norm_cfg = dict(
    mean=[123.675, 116.28, 103.53], std=[58.395, 57.12, 57.375], to_rgb=True)
train_pipeline = [
    dict(type='LoadImageFromFile'),
    dict(type='RandomResizedCrop', size=224),
    dict(type='RandomFlip', flip_prob=0.5, direction='horizontal'),
    dict(
        type='Normalize',
        mean=[123.675, 116.28, 103.53],
        std=[58.395, 57.12, 57.375],
        to_rgb=True),
    dict(type='ImageToTensor', keys=['img']),
    dict(type='ToTensor', keys=['gt_label']),
    dict(type='Collect', keys=['img', 'gt_label'])
]
test_pipeline = [
    dict(type='LoadImageFromFile'),
    dict(type='Resize', size=(256, -1)),
    dict(type='CenterCrop', crop_size=224),
    dict(
        type='Normalize',
        mean=[123.675, 116.28, 103.53],
        std=[58.395, 57.12, 57.375],
        to_rgb=True),
    dict(type='ImageToTensor', keys=['img']),
    dict(type='Collect', keys=['img'])
]
data = dict(
    samples_per_gpu=32,
    workers_per_gpu=2,
    train=dict(
        type='ImageNet',
        data_prefix='data/train',
        pipeline=[
            dict(type='LoadImageFromFile'),
            dict(type='RandomResizedCrop', size=224),
            dict(type='RandomFlip', flip_prob=0.5, direction='horizontal'),
            dict(
                type='Normalize',
                mean=[123.675, 116.28, 103.53],
                std=[58.395, 57.12, 57.375],
                to_rgb=True),
            dict(type='ImageToTensor', keys=['img']),
            dict(type='ToTensor', keys=['gt_label']),
            dict(type='Collect', keys=['img', 'gt_label'])
        ],
        ann_file='data/train.txt',
        classes='data/classes.txt'),
    val=dict(
        type='ImageNet',
        data_prefix='data/val',
        ann_file='data/val.txt',
        pipeline=[
            dict(type='LoadImageFromFile'),
            dict(type='Resize', size=(256, -1)),
            dict(type='CenterCrop', crop_size=224),
            dict(
                type='Normalize',
                mean=[123.675, 116.28, 103.53],
                std=[58.395, 57.12, 57.375],
                to_rgb=True),
            dict(type='ImageToTensor', keys=['img']),
            dict(type='Collect', keys=['img'])
        ],
        classes='data/classes.txt'),
    test=dict(
        type='ImageNet',
        data_prefix='data/imagenet/val',
        ann_file='data/imagenet/meta/val.txt',
        pipeline=[
            dict(type='LoadImageFromFile'),
            dict(type='Resize', size=(256, -1)),
            dict(type='CenterCrop', crop_size=224),
            dict(
                type='Normalize',
                mean=[123.675, 116.28, 103.53],
                std=[58.395, 57.12, 57.375],
                to_rgb=True),
            dict(type='ImageToTensor', keys=['img']),
            dict(type='Collect', keys=['img'])
        ]))
evaluation = dict(interval=1, metric='accuracy')
checkpoint_config = dict(interval=1)
log_config = dict(interval=100, hooks=[dict(type='TextLoggerHook')])
dist_params = dict(backend='nccl')
log_level = 'INFO'
load_from = 'checkpoints/resnet18_batch256_imagenet_20200708-34ab8f90.pth'
resume_from = None
workflow = [('train', 1)]
optimizer = dict(type='SGD', lr=0.001, momentum=0.9, weight_decay=0.0001)
optimizer_config = dict(grad_clip=None)
lr_config = dict(policy='step', step=[1])
runner = dict(type='EpochBasedRunner', max_epochs=100)
work_dir = '/HOME/scz0beu/run/H1_result'
gpu_ids = range(0, 2)

2023-02-05 19:42:07,614 - mmcls - INFO - Set random seed to 1913914453, deterministic: False
2023-02-05 19:42:07,689 - mmcls - INFO - initialize ResNet with init_cfg [{'type': 'Kaiming', 'layer': ['Conv2d']}, {'type': 'Constant', 'val': 1, 'layer': ['_BatchNorm', 'GroupNorm']}]
2023-02-05 19:42:07,762 - mmcls - INFO - initialize LinearClsHead with init_cfg {'type': 'Normal', 'layer': 'Linear', 'std': 0.01}
Name of parameter - Initialization information

backbone.conv1.weight - torch.Size([64, 3, 7, 7]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.bn1.weight - torch.Size([64]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.bn1.bias - torch.Size([64]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer1.0.conv1.weight - torch.Size([64, 64, 3, 3]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.layer1.0.bn1.weight - torch.Size([64]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer1.0.bn1.bias - torch.Size([64]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer1.0.conv2.weight - torch.Size([64, 64, 3, 3]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.layer1.0.bn2.weight - torch.Size([64]): 
Initialized by user-defined `init_weights` in ResNet  

backbone.layer1.0.bn2.bias - torch.Size([64]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer1.1.conv1.weight - torch.Size([64, 64, 3, 3]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.layer1.1.bn1.weight - torch.Size([64]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer1.1.bn1.bias - torch.Size([64]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer1.1.conv2.weight - torch.Size([64, 64, 3, 3]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.layer1.1.bn2.weight - torch.Size([64]): 
Initialized by user-defined `init_weights` in ResNet  

backbone.layer1.1.bn2.bias - torch.Size([64]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer2.0.conv1.weight - torch.Size([128, 64, 3, 3]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.layer2.0.bn1.weight - torch.Size([128]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer2.0.bn1.bias - torch.Size([128]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer2.0.conv2.weight - torch.Size([128, 128, 3, 3]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.layer2.0.bn2.weight - torch.Size([128]): 
Initialized by user-defined `init_weights` in ResNet  

backbone.layer2.0.bn2.bias - torch.Size([128]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer2.0.downsample.0.weight - torch.Size([128, 64, 1, 1]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.layer2.0.downsample.1.weight - torch.Size([128]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer2.0.downsample.1.bias - torch.Size([128]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer2.1.conv1.weight - torch.Size([128, 128, 3, 3]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.layer2.1.bn1.weight - torch.Size([128]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer2.1.bn1.bias - torch.Size([128]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer2.1.conv2.weight - torch.Size([128, 128, 3, 3]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.layer2.1.bn2.weight - torch.Size([128]): 
Initialized by user-defined `init_weights` in ResNet  

backbone.layer2.1.bn2.bias - torch.Size([128]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer3.0.conv1.weight - torch.Size([256, 128, 3, 3]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.layer3.0.bn1.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer3.0.bn1.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer3.0.conv2.weight - torch.Size([256, 256, 3, 3]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.layer3.0.bn2.weight - torch.Size([256]): 
Initialized by user-defined `init_weights` in ResNet  

backbone.layer3.0.bn2.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer3.0.downsample.0.weight - torch.Size([256, 128, 1, 1]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.layer3.0.downsample.1.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer3.0.downsample.1.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer3.1.conv1.weight - torch.Size([256, 256, 3, 3]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.layer3.1.bn1.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer3.1.bn1.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer3.1.conv2.weight - torch.Size([256, 256, 3, 3]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.layer3.1.bn2.weight - torch.Size([256]): 
Initialized by user-defined `init_weights` in ResNet  

backbone.layer3.1.bn2.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer4.0.conv1.weight - torch.Size([512, 256, 3, 3]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.layer4.0.bn1.weight - torch.Size([512]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer4.0.bn1.bias - torch.Size([512]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer4.0.conv2.weight - torch.Size([512, 512, 3, 3]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.layer4.0.bn2.weight - torch.Size([512]): 
Initialized by user-defined `init_weights` in ResNet  

backbone.layer4.0.bn2.bias - torch.Size([512]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer4.0.downsample.0.weight - torch.Size([512, 256, 1, 1]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.layer4.0.downsample.1.weight - torch.Size([512]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer4.0.downsample.1.bias - torch.Size([512]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer4.1.conv1.weight - torch.Size([512, 512, 3, 3]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.layer4.1.bn1.weight - torch.Size([512]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer4.1.bn1.bias - torch.Size([512]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer4.1.conv2.weight - torch.Size([512, 512, 3, 3]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.layer4.1.bn2.weight - torch.Size([512]): 
Initialized by user-defined `init_weights` in ResNet  

backbone.layer4.1.bn2.bias - torch.Size([512]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

head.fc.weight - torch.Size([5, 512]): 
NormalInit: mean=0, std=0.01, bias=0 

head.fc.bias - torch.Size([5]): 
NormalInit: mean=0, std=0.01, bias=0 
2023-02-05 19:42:07,966 - mmcls - INFO - load checkpoint from local path: checkpoints/resnet18_batch256_imagenet_20200708-34ab8f90.pth
2023-02-05 19:42:08,024 - mmcls - WARNING - The model and loaded state dict do not match exactly

size mismatch for head.fc.weight: copying a param with shape torch.Size([1000, 512]) from checkpoint, the shape in current model is torch.Size([5, 512]).
size mismatch for head.fc.bias: copying a param with shape torch.Size([1000]) from checkpoint, the shape in current model is torch.Size([5]).
2023-02-05 19:42:08,024 - mmcls - INFO - Start running, host: scz0beu@g0097, work_dir: /HOME/scz0beu/run/H1_result
2023-02-05 19:42:08,025 - mmcls - INFO - Hooks will be executed in the following order:
before_run:
(VERY_HIGH   ) StepLrUpdaterHook                  
(NORMAL      ) CheckpointHook                     
(LOW         ) DistEvalHook                       
(VERY_LOW    ) TextLoggerHook                     
 -------------------- 
before_train_epoch:
(VERY_HIGH   ) StepLrUpdaterHook                  
(NORMAL      ) DistSamplerSeedHook                
(LOW         ) IterTimerHook                      
(LOW         ) DistEvalHook                       
(VERY_LOW    ) TextLoggerHook                     
 -------------------- 
before_train_iter:
(VERY_HIGH   ) StepLrUpdaterHook                  
(LOW         ) IterTimerHook                      
(LOW         ) DistEvalHook                       
 -------------------- 
after_train_iter:
(ABOVE_NORMAL) DistOptimizerHook                  
(NORMAL      ) CheckpointHook                     
(LOW         ) IterTimerHook                      
(LOW         ) DistEvalHook                       
(VERY_LOW    ) TextLoggerHook                     
 -------------------- 
after_train_epoch:
(NORMAL      ) CheckpointHook                     
(LOW         ) DistEvalHook                       
(VERY_LOW    ) TextLoggerHook                     
 -------------------- 
before_val_epoch:
(NORMAL      ) DistSamplerSeedHook                
(LOW         ) IterTimerHook                      
(VERY_LOW    ) TextLoggerHook                     
 -------------------- 
before_val_iter:
(LOW         ) IterTimerHook                      
 -------------------- 
after_val_iter:
(LOW         ) IterTimerHook                      
 -------------------- 
after_val_epoch:
(VERY_LOW    ) TextLoggerHook                     
 -------------------- 
after_run:
(VERY_LOW    ) TextLoggerHook                     
 -------------------- 
2023-02-05 19:42:08,025 - mmcls - INFO - workflow: [('train', 1)], max: 100 epochs
2023-02-05 19:42:08,025 - mmcls - INFO - Checkpoints will be saved to /HOME/scz0beu/run/H1_result by HardDiskBackend.
2023-02-05 19:42:12,496 - mmcls - INFO - Saving checkpoint at 1 epochs
2023-02-05 19:42:15,266 - mmcls - INFO - Epoch(val) [1][9]	accuracy_top-1: 91.4336, accuracy_top-5: 100.0000
2023-02-05 19:42:19,095 - mmcls - INFO - Saving checkpoint at 2 epochs
2023-02-05 19:42:21,737 - mmcls - INFO - Epoch(val) [2][9]	accuracy_top-1: 90.9091, accuracy_top-5: 100.0000
2023-02-05 19:42:25,575 - mmcls - INFO - Saving checkpoint at 3 epochs
2023-02-05 19:42:28,212 - mmcls - INFO - Epoch(val) [3][9]	accuracy_top-1: 91.2587, accuracy_top-5: 100.0000
2023-02-05 19:42:32,029 - mmcls - INFO - Saving checkpoint at 4 epochs
2023-02-05 19:42:34,686 - mmcls - INFO - Epoch(val) [4][9]	accuracy_top-1: 91.2587, accuracy_top-5: 100.0000
2023-02-05 19:42:38,503 - mmcls - INFO - Saving checkpoint at 5 epochs
2023-02-05 19:42:41,142 - mmcls - INFO - Epoch(val) [5][9]	accuracy_top-1: 91.7832, accuracy_top-5: 100.0000
2023-02-05 19:42:44,940 - mmcls - INFO - Saving checkpoint at 6 epochs
2023-02-05 19:42:47,592 - mmcls - INFO - Epoch(val) [6][9]	accuracy_top-1: 91.4336, accuracy_top-5: 100.0000
2023-02-05 19:42:51,436 - mmcls - INFO - Saving checkpoint at 7 epochs
2023-02-05 19:42:54,077 - mmcls - INFO - Epoch(val) [7][9]	accuracy_top-1: 91.7832, accuracy_top-5: 100.0000
2023-02-05 19:42:57,942 - mmcls - INFO - Saving checkpoint at 8 epochs
2023-02-05 19:43:00,588 - mmcls - INFO - Epoch(val) [8][9]	accuracy_top-1: 91.7832, accuracy_top-5: 100.0000
2023-02-05 19:43:04,417 - mmcls - INFO - Saving checkpoint at 9 epochs
2023-02-05 19:43:07,057 - mmcls - INFO - Epoch(val) [9][9]	accuracy_top-1: 91.9580, accuracy_top-5: 100.0000
2023-02-05 19:43:10,917 - mmcls - INFO - Saving checkpoint at 10 epochs
2023-02-05 19:43:13,562 - mmcls - INFO - Epoch(val) [10][9]	accuracy_top-1: 92.3077, accuracy_top-5: 100.0000
2023-02-05 19:43:17,403 - mmcls - INFO - Saving checkpoint at 11 epochs
2023-02-05 19:43:20,055 - mmcls - INFO - Epoch(val) [11][9]	accuracy_top-1: 92.3077, accuracy_top-5: 100.0000
2023-02-05 19:43:23,893 - mmcls - INFO - Saving checkpoint at 12 epochs
2023-02-05 19:43:26,536 - mmcls - INFO - Epoch(val) [12][9]	accuracy_top-1: 92.8322, accuracy_top-5: 100.0000
2023-02-05 19:43:30,385 - mmcls - INFO - Saving checkpoint at 13 epochs
2023-02-05 19:43:33,026 - mmcls - INFO - Epoch(val) [13][9]	accuracy_top-1: 92.3077, accuracy_top-5: 100.0000
2023-02-05 19:43:36,911 - mmcls - INFO - Saving checkpoint at 14 epochs
2023-02-05 19:43:39,561 - mmcls - INFO - Epoch(val) [14][9]	accuracy_top-1: 92.6573, accuracy_top-5: 100.0000
2023-02-05 19:43:43,402 - mmcls - INFO - Saving checkpoint at 15 epochs
2023-02-05 19:43:46,054 - mmcls - INFO - Epoch(val) [15][9]	accuracy_top-1: 92.8322, accuracy_top-5: 100.0000
2023-02-05 19:43:49,858 - mmcls - INFO - Saving checkpoint at 16 epochs
2023-02-05 19:43:52,497 - mmcls - INFO - Epoch(val) [16][9]	accuracy_top-1: 93.0070, accuracy_top-5: 100.0000
2023-02-05 19:43:56,319 - mmcls - INFO - Saving checkpoint at 17 epochs
2023-02-05 19:43:58,966 - mmcls - INFO - Epoch(val) [17][9]	accuracy_top-1: 93.3566, accuracy_top-5: 100.0000
2023-02-05 19:44:02,836 - mmcls - INFO - Saving checkpoint at 18 epochs
2023-02-05 19:44:05,486 - mmcls - INFO - Epoch(val) [18][9]	accuracy_top-1: 92.8322, accuracy_top-5: 100.0000
2023-02-05 19:44:09,311 - mmcls - INFO - Saving checkpoint at 19 epochs
2023-02-05 19:44:11,975 - mmcls - INFO - Epoch(val) [19][9]	accuracy_top-1: 93.1818, accuracy_top-5: 100.0000
2023-02-05 19:44:15,833 - mmcls - INFO - Saving checkpoint at 20 epochs
2023-02-05 19:44:18,483 - mmcls - INFO - Epoch(val) [20][9]	accuracy_top-1: 93.3566, accuracy_top-5: 100.0000
2023-02-05 19:44:22,305 - mmcls - INFO - Saving checkpoint at 21 epochs
2023-02-05 19:44:24,959 - mmcls - INFO - Epoch(val) [21][9]	accuracy_top-1: 93.3566, accuracy_top-5: 100.0000
2023-02-05 19:44:28,824 - mmcls - INFO - Saving checkpoint at 22 epochs
2023-02-05 19:44:31,482 - mmcls - INFO - Epoch(val) [22][9]	accuracy_top-1: 92.8322, accuracy_top-5: 100.0000
2023-02-05 19:44:35,312 - mmcls - INFO - Saving checkpoint at 23 epochs
2023-02-05 19:44:37,959 - mmcls - INFO - Epoch(val) [23][9]	accuracy_top-1: 93.1818, accuracy_top-5: 100.0000
2023-02-05 19:44:41,810 - mmcls - INFO - Saving checkpoint at 24 epochs
2023-02-05 19:44:44,455 - mmcls - INFO - Epoch(val) [24][9]	accuracy_top-1: 93.3566, accuracy_top-5: 100.0000
2023-02-05 19:44:48,260 - mmcls - INFO - Saving checkpoint at 25 epochs
2023-02-05 19:44:50,916 - mmcls - INFO - Epoch(val) [25][9]	accuracy_top-1: 93.1818, accuracy_top-5: 100.0000
2023-02-05 19:44:54,751 - mmcls - INFO - Saving checkpoint at 26 epochs
2023-02-05 19:44:57,416 - mmcls - INFO - Epoch(val) [26][9]	accuracy_top-1: 93.7063, accuracy_top-5: 100.0000
2023-02-05 19:45:01,301 - mmcls - INFO - Saving checkpoint at 27 epochs
2023-02-05 19:45:03,944 - mmcls - INFO - Epoch(val) [27][9]	accuracy_top-1: 93.3566, accuracy_top-5: 100.0000
2023-02-05 19:45:07,740 - mmcls - INFO - Saving checkpoint at 28 epochs
2023-02-05 19:45:10,391 - mmcls - INFO - Epoch(val) [28][9]	accuracy_top-1: 93.7063, accuracy_top-5: 100.0000
2023-02-05 19:45:14,270 - mmcls - INFO - Saving checkpoint at 29 epochs
2023-02-05 19:45:16,909 - mmcls - INFO - Epoch(val) [29][9]	accuracy_top-1: 93.5315, accuracy_top-5: 100.0000
2023-02-05 19:45:20,713 - mmcls - INFO - Saving checkpoint at 30 epochs
2023-02-05 19:45:23,366 - mmcls - INFO - Epoch(val) [30][9]	accuracy_top-1: 93.3566, accuracy_top-5: 100.0000
2023-02-05 19:45:27,250 - mmcls - INFO - Saving checkpoint at 31 epochs
2023-02-05 19:45:29,880 - mmcls - INFO - Epoch(val) [31][9]	accuracy_top-1: 93.7063, accuracy_top-5: 100.0000
2023-02-05 19:45:33,740 - mmcls - INFO - Saving checkpoint at 32 epochs
2023-02-05 19:45:36,386 - mmcls - INFO - Epoch(val) [32][9]	accuracy_top-1: 93.7063, accuracy_top-5: 100.0000
2023-02-05 19:45:40,203 - mmcls - INFO - Saving checkpoint at 33 epochs
2023-02-05 19:45:42,858 - mmcls - INFO - Epoch(val) [33][9]	accuracy_top-1: 93.8811, accuracy_top-5: 100.0000
2023-02-05 19:45:46,764 - mmcls - INFO - Saving checkpoint at 34 epochs
2023-02-05 19:45:49,404 - mmcls - INFO - Epoch(val) [34][9]	accuracy_top-1: 93.5315, accuracy_top-5: 100.0000
2023-02-05 19:45:53,291 - mmcls - INFO - Saving checkpoint at 35 epochs
2023-02-05 19:45:55,941 - mmcls - INFO - Epoch(val) [35][9]	accuracy_top-1: 93.3566, accuracy_top-5: 100.0000
2023-02-05 19:45:59,780 - mmcls - INFO - Saving checkpoint at 36 epochs
2023-02-05 19:46:02,426 - mmcls - INFO - Epoch(val) [36][9]	accuracy_top-1: 93.5315, accuracy_top-5: 100.0000
2023-02-05 19:46:06,276 - mmcls - INFO - Saving checkpoint at 37 epochs
2023-02-05 19:46:08,931 - mmcls - INFO - Epoch(val) [37][9]	accuracy_top-1: 93.3566, accuracy_top-5: 100.0000
2023-02-05 19:46:12,824 - mmcls - INFO - Saving checkpoint at 38 epochs
2023-02-05 19:46:15,496 - mmcls - INFO - Epoch(val) [38][9]	accuracy_top-1: 93.1818, accuracy_top-5: 100.0000
2023-02-05 19:46:19,357 - mmcls - INFO - Saving checkpoint at 39 epochs
2023-02-05 19:46:22,029 - mmcls - INFO - Epoch(val) [39][9]	accuracy_top-1: 93.3566, accuracy_top-5: 100.0000
2023-02-05 19:46:25,892 - mmcls - INFO - Saving checkpoint at 40 epochs
2023-02-05 19:46:28,537 - mmcls - INFO - Epoch(val) [40][9]	accuracy_top-1: 93.3566, accuracy_top-5: 100.0000
2023-02-05 19:46:32,399 - mmcls - INFO - Saving checkpoint at 41 epochs
2023-02-05 19:46:35,057 - mmcls - INFO - Epoch(val) [41][9]	accuracy_top-1: 93.7063, accuracy_top-5: 100.0000
2023-02-05 19:46:38,921 - mmcls - INFO - Saving checkpoint at 42 epochs
2023-02-05 19:46:41,558 - mmcls - INFO - Epoch(val) [42][9]	accuracy_top-1: 93.5315, accuracy_top-5: 100.0000
2023-02-05 19:46:45,433 - mmcls - INFO - Saving checkpoint at 43 epochs
2023-02-05 19:46:48,098 - mmcls - INFO - Epoch(val) [43][9]	accuracy_top-1: 93.8811, accuracy_top-5: 100.0000
2023-02-05 19:46:51,989 - mmcls - INFO - Saving checkpoint at 44 epochs
2023-02-05 19:46:54,631 - mmcls - INFO - Epoch(val) [44][9]	accuracy_top-1: 93.7063, accuracy_top-5: 100.0000
2023-02-05 19:46:58,474 - mmcls - INFO - Saving checkpoint at 45 epochs
2023-02-05 19:47:01,146 - mmcls - INFO - Epoch(val) [45][9]	accuracy_top-1: 93.3566, accuracy_top-5: 100.0000
2023-02-05 19:47:04,962 - mmcls - INFO - Saving checkpoint at 46 epochs
2023-02-05 19:47:07,614 - mmcls - INFO - Epoch(val) [46][9]	accuracy_top-1: 93.8811, accuracy_top-5: 100.0000
2023-02-05 19:47:11,468 - mmcls - INFO - Saving checkpoint at 47 epochs
2023-02-05 19:47:14,133 - mmcls - INFO - Epoch(val) [47][9]	accuracy_top-1: 93.7063, accuracy_top-5: 100.0000
2023-02-05 19:47:18,005 - mmcls - INFO - Saving checkpoint at 48 epochs
2023-02-05 19:47:20,651 - mmcls - INFO - Epoch(val) [48][9]	accuracy_top-1: 93.3566, accuracy_top-5: 100.0000
2023-02-05 19:47:24,488 - mmcls - INFO - Saving checkpoint at 49 epochs
2023-02-05 19:47:27,149 - mmcls - INFO - Epoch(val) [49][9]	accuracy_top-1: 93.7063, accuracy_top-5: 100.0000
2023-02-05 19:47:30,953 - mmcls - INFO - Saving checkpoint at 50 epochs
2023-02-05 19:47:33,603 - mmcls - INFO - Epoch(val) [50][9]	accuracy_top-1: 93.8811, accuracy_top-5: 100.0000
2023-02-05 19:47:37,434 - mmcls - INFO - Saving checkpoint at 51 epochs
2023-02-05 19:47:40,073 - mmcls - INFO - Epoch(val) [51][9]	accuracy_top-1: 93.8811, accuracy_top-5: 100.0000
2023-02-05 19:47:43,885 - mmcls - INFO - Saving checkpoint at 52 epochs
2023-02-05 19:47:46,540 - mmcls - INFO - Epoch(val) [52][9]	accuracy_top-1: 93.5315, accuracy_top-5: 100.0000
2023-02-05 19:47:50,412 - mmcls - INFO - Saving checkpoint at 53 epochs
2023-02-05 19:47:53,041 - mmcls - INFO - Epoch(val) [53][9]	accuracy_top-1: 93.7063, accuracy_top-5: 100.0000
2023-02-05 19:47:56,899 - mmcls - INFO - Saving checkpoint at 54 epochs
2023-02-05 19:47:59,545 - mmcls - INFO - Epoch(val) [54][9]	accuracy_top-1: 94.2308, accuracy_top-5: 100.0000
2023-02-05 19:48:03,382 - mmcls - INFO - Saving checkpoint at 55 epochs
2023-02-05 19:48:06,011 - mmcls - INFO - Epoch(val) [55][9]	accuracy_top-1: 94.0559, accuracy_top-5: 100.0000
2023-02-05 19:48:09,817 - mmcls - INFO - Saving checkpoint at 56 epochs
2023-02-05 19:48:12,477 - mmcls - INFO - Epoch(val) [56][9]	accuracy_top-1: 93.7063, accuracy_top-5: 100.0000
2023-02-05 19:48:16,311 - mmcls - INFO - Saving checkpoint at 57 epochs
2023-02-05 19:48:18,943 - mmcls - INFO - Epoch(val) [57][9]	accuracy_top-1: 93.3566, accuracy_top-5: 100.0000
2023-02-05 19:48:22,806 - mmcls - INFO - Saving checkpoint at 58 epochs
2023-02-05 19:48:25,459 - mmcls - INFO - Epoch(val) [58][9]	accuracy_top-1: 94.0559, accuracy_top-5: 100.0000
2023-02-05 19:48:29,299 - mmcls - INFO - Saving checkpoint at 59 epochs
2023-02-05 19:48:31,932 - mmcls - INFO - Epoch(val) [59][9]	accuracy_top-1: 93.8811, accuracy_top-5: 100.0000
2023-02-05 19:48:35,808 - mmcls - INFO - Saving checkpoint at 60 epochs
2023-02-05 19:48:38,438 - mmcls - INFO - Epoch(val) [60][9]	accuracy_top-1: 93.8811, accuracy_top-5: 100.0000
2023-02-05 19:48:42,265 - mmcls - INFO - Saving checkpoint at 61 epochs
2023-02-05 19:48:44,903 - mmcls - INFO - Epoch(val) [61][9]	accuracy_top-1: 93.7063, accuracy_top-5: 100.0000
2023-02-05 19:48:48,751 - mmcls - INFO - Saving checkpoint at 62 epochs
2023-02-05 19:48:51,395 - mmcls - INFO - Epoch(val) [62][9]	accuracy_top-1: 93.7063, accuracy_top-5: 100.0000
2023-02-05 19:48:55,246 - mmcls - INFO - Saving checkpoint at 63 epochs
2023-02-05 19:48:57,876 - mmcls - INFO - Epoch(val) [63][9]	accuracy_top-1: 93.8811, accuracy_top-5: 100.0000
2023-02-05 19:49:01,717 - mmcls - INFO - Saving checkpoint at 64 epochs
2023-02-05 19:49:04,357 - mmcls - INFO - Epoch(val) [64][9]	accuracy_top-1: 93.7063, accuracy_top-5: 100.0000
2023-02-05 19:49:08,232 - mmcls - INFO - Saving checkpoint at 65 epochs
2023-02-05 19:49:10,865 - mmcls - INFO - Epoch(val) [65][9]	accuracy_top-1: 93.8811, accuracy_top-5: 100.0000
2023-02-05 19:49:14,741 - mmcls - INFO - Saving checkpoint at 66 epochs
2023-02-05 19:49:17,381 - mmcls - INFO - Epoch(val) [66][9]	accuracy_top-1: 93.5315, accuracy_top-5: 100.0000
2023-02-05 19:49:21,247 - mmcls - INFO - Saving checkpoint at 67 epochs
2023-02-05 19:49:23,882 - mmcls - INFO - Epoch(val) [67][9]	accuracy_top-1: 93.5315, accuracy_top-5: 100.0000
2023-02-05 19:49:27,713 - mmcls - INFO - Saving checkpoint at 68 epochs
2023-02-05 19:49:30,361 - mmcls - INFO - Epoch(val) [68][9]	accuracy_top-1: 94.2308, accuracy_top-5: 100.0000
2023-02-05 19:49:34,197 - mmcls - INFO - Saving checkpoint at 69 epochs
2023-02-05 19:49:36,824 - mmcls - INFO - Epoch(val) [69][9]	accuracy_top-1: 94.4056, accuracy_top-5: 100.0000
2023-02-05 19:49:40,692 - mmcls - INFO - Saving checkpoint at 70 epochs
2023-02-05 19:49:43,327 - mmcls - INFO - Epoch(val) [70][9]	accuracy_top-1: 93.8811, accuracy_top-5: 100.0000
2023-02-05 19:49:47,192 - mmcls - INFO - Saving checkpoint at 71 epochs
2023-02-05 19:49:49,821 - mmcls - INFO - Epoch(val) [71][9]	accuracy_top-1: 94.0559, accuracy_top-5: 100.0000
2023-02-05 19:49:53,640 - mmcls - INFO - Saving checkpoint at 72 epochs
2023-02-05 19:49:56,270 - mmcls - INFO - Epoch(val) [72][9]	accuracy_top-1: 94.0559, accuracy_top-5: 100.0000
2023-02-05 19:50:00,083 - mmcls - INFO - Saving checkpoint at 73 epochs
2023-02-05 19:50:02,713 - mmcls - INFO - Epoch(val) [73][9]	accuracy_top-1: 93.8811, accuracy_top-5: 100.0000
2023-02-05 19:50:06,533 - mmcls - INFO - Saving checkpoint at 74 epochs
2023-02-05 19:50:09,164 - mmcls - INFO - Epoch(val) [74][9]	accuracy_top-1: 94.0559, accuracy_top-5: 100.0000
2023-02-05 19:50:12,969 - mmcls - INFO - Saving checkpoint at 75 epochs
2023-02-05 19:50:15,600 - mmcls - INFO - Epoch(val) [75][9]	accuracy_top-1: 93.7063, accuracy_top-5: 100.0000
2023-02-05 19:50:19,396 - mmcls - INFO - Saving checkpoint at 76 epochs
2023-02-05 19:50:22,019 - mmcls - INFO - Epoch(val) [76][9]	accuracy_top-1: 94.0559, accuracy_top-5: 100.0000
2023-02-05 19:50:25,793 - mmcls - INFO - Saving checkpoint at 77 epochs
2023-02-05 19:50:28,426 - mmcls - INFO - Epoch(val) [77][9]	accuracy_top-1: 94.2308, accuracy_top-5: 100.0000
2023-02-05 19:50:32,216 - mmcls - INFO - Saving checkpoint at 78 epochs
2023-02-05 19:50:34,849 - mmcls - INFO - Epoch(val) [78][9]	accuracy_top-1: 94.0559, accuracy_top-5: 100.0000
2023-02-05 19:50:38,647 - mmcls - INFO - Saving checkpoint at 79 epochs
2023-02-05 19:50:41,287 - mmcls - INFO - Epoch(val) [79][9]	accuracy_top-1: 94.0559, accuracy_top-5: 100.0000
2023-02-05 19:50:45,090 - mmcls - INFO - Saving checkpoint at 80 epochs
2023-02-05 19:50:47,728 - mmcls - INFO - Epoch(val) [80][9]	accuracy_top-1: 94.2308, accuracy_top-5: 100.0000
2023-02-05 19:50:51,531 - mmcls - INFO - Saving checkpoint at 81 epochs
2023-02-05 19:50:54,188 - mmcls - INFO - Epoch(val) [81][9]	accuracy_top-1: 94.2308, accuracy_top-5: 100.0000
2023-02-05 19:50:57,981 - mmcls - INFO - Saving checkpoint at 82 epochs
2023-02-05 19:51:00,636 - mmcls - INFO - Epoch(val) [82][9]	accuracy_top-1: 93.7063, accuracy_top-5: 100.0000
2023-02-05 19:51:04,423 - mmcls - INFO - Saving checkpoint at 83 epochs
2023-02-05 19:51:07,048 - mmcls - INFO - Epoch(val) [83][9]	accuracy_top-1: 94.2308, accuracy_top-5: 100.0000
2023-02-05 19:51:10,853 - mmcls - INFO - Saving checkpoint at 84 epochs
2023-02-05 19:51:13,511 - mmcls - INFO - Epoch(val) [84][9]	accuracy_top-1: 94.4056, accuracy_top-5: 100.0000
2023-02-05 19:51:17,352 - mmcls - INFO - Saving checkpoint at 85 epochs
2023-02-05 19:51:20,007 - mmcls - INFO - Epoch(val) [85][9]	accuracy_top-1: 94.0559, accuracy_top-5: 100.0000
2023-02-05 19:51:23,786 - mmcls - INFO - Saving checkpoint at 86 epochs
2023-02-05 19:51:26,429 - mmcls - INFO - Epoch(val) [86][9]	accuracy_top-1: 93.8811, accuracy_top-5: 100.0000
2023-02-05 19:51:30,251 - mmcls - INFO - Saving checkpoint at 87 epochs
2023-02-05 19:51:32,897 - mmcls - INFO - Epoch(val) [87][9]	accuracy_top-1: 94.7552, accuracy_top-5: 100.0000
2023-02-05 19:51:36,691 - mmcls - INFO - Saving checkpoint at 88 epochs
2023-02-05 19:51:39,333 - mmcls - INFO - Epoch(val) [88][9]	accuracy_top-1: 94.4056, accuracy_top-5: 100.0000
2023-02-05 19:51:43,145 - mmcls - INFO - Saving checkpoint at 89 epochs
2023-02-05 19:51:45,774 - mmcls - INFO - Epoch(val) [89][9]	accuracy_top-1: 94.2308, accuracy_top-5: 100.0000
2023-02-05 19:51:49,592 - mmcls - INFO - Saving checkpoint at 90 epochs
2023-02-05 19:51:52,226 - mmcls - INFO - Epoch(val) [90][9]	accuracy_top-1: 94.7552, accuracy_top-5: 100.0000
2023-02-05 19:51:56,069 - mmcls - INFO - Saving checkpoint at 91 epochs
2023-02-05 19:51:58,707 - mmcls - INFO - Epoch(val) [91][9]	accuracy_top-1: 94.4056, accuracy_top-5: 100.0000
2023-02-05 19:52:02,494 - mmcls - INFO - Saving checkpoint at 92 epochs
2023-02-05 19:52:05,129 - mmcls - INFO - Epoch(val) [92][9]	accuracy_top-1: 94.4056, accuracy_top-5: 100.0000
2023-02-05 19:52:08,969 - mmcls - INFO - Saving checkpoint at 93 epochs
2023-02-05 19:52:11,597 - mmcls - INFO - Epoch(val) [93][9]	accuracy_top-1: 94.2308, accuracy_top-5: 100.0000
2023-02-05 19:52:15,462 - mmcls - INFO - Saving checkpoint at 94 epochs
2023-02-05 19:52:18,103 - mmcls - INFO - Epoch(val) [94][9]	accuracy_top-1: 94.4056, accuracy_top-5: 100.0000
2023-02-05 19:52:21,963 - mmcls - INFO - Saving checkpoint at 95 epochs
2023-02-05 19:52:24,601 - mmcls - INFO - Epoch(val) [95][9]	accuracy_top-1: 94.0559, accuracy_top-5: 100.0000
2023-02-05 19:52:28,432 - mmcls - INFO - Saving checkpoint at 96 epochs
2023-02-05 19:52:31,067 - mmcls - INFO - Epoch(val) [96][9]	accuracy_top-1: 94.2308, accuracy_top-5: 100.0000
2023-02-05 19:52:34,868 - mmcls - INFO - Saving checkpoint at 97 epochs
2023-02-05 19:52:37,501 - mmcls - INFO - Epoch(val) [97][9]	accuracy_top-1: 94.2308, accuracy_top-5: 100.0000
2023-02-05 19:52:41,309 - mmcls - INFO - Saving checkpoint at 98 epochs
2023-02-05 19:52:43,943 - mmcls - INFO - Epoch(val) [98][9]	accuracy_top-1: 94.2308, accuracy_top-5: 100.0000
2023-02-05 19:52:47,715 - mmcls - INFO - Saving checkpoint at 99 epochs
2023-02-05 19:52:50,347 - mmcls - INFO - Epoch(val) [99][9]	accuracy_top-1: 94.0559, accuracy_top-5: 100.0000
2023-02-05 19:52:54,150 - mmcls - INFO - Saving checkpoint at 100 epochs
2023-02-05 19:52:56,779 - mmcls - INFO - Epoch(val) [100][9]	accuracy_top-1: 94.4056, accuracy_top-5: 100.0000
